{"version":3,"sources":["logo.svg","TextUtiles/TextUtils.js","Navbar/Navbar.js","About/About.js","Alert/Alert.js","App.js","index.js"],"names":["TextUtils","props","useState","text","setText","className","style","myStyle","cols","rows","value","onChange","event","target","onClick","newStr","toUpperCase","toLowerCase","splitted","split","join","textToSelect","document","getElementsByClassName","select","navigator","clipboard","writeText","length","Navbar","color","backgroundColor","class","mode","id","to","type","role","changeMode","HTMLFor","About","Alert","height","alert","msg","App","setAlert","showAlert","message","setTimeout","setMode","setStyle","body","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.980ab832.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import react, {useState} from \"react\";\nimport './Textutilscss.css'\n\nexport default function TextUtils(props)\n{\n    let handleUpperCase = () => {\n        // console.log(\"upper\");\n        let newStr = text.toUpperCase();\n        setText(newStr);\n    }\n\n    let handleLowerCase = () => {\n        // console.log(\"Lower\");\n        let newStr = text.toLowerCase();\n        setText(newStr);\n    }\n\n    let handleExtraSpaces = () => {\n        let splitted = text.split(/[ ]+/);\n        setText(splitted.join(\" \"))\n    }\n\n    let handleCopy = () => {\n        let textToSelect = document.getElementsByClassName(\"textArea\")[0];\n        textToSelect.select();\n        navigator.clipboard.writeText(textToSelect.value);\n    }\n\n    let handleOnChange = (event) => {\n        // console.log(\"On Change\");\n        setText(event.target.value)\n    }    \n\n    const [text, setText] = useState(\"\")\n    return (\n        <>\n        <div className=\"container\" style={props.myStyle}>\n            <textarea cols=\"100\" rows=\"9\" value={text} onChange={handleOnChange} className=\"textArea\" style={props.myStyle}></textarea>\n\n            <div className=\"myBtns\">\n                <button onClick={handleUpperCase} className=\"btnn\" style={props.myStyle}>convert to upper case</button>\n\n                <button onClick={handleLowerCase} className=\"btnn\" style={props.myStyle}>convert to lower case </button>\n\n                <button onClick={handleExtraSpaces} className=\"btnn\" style={props.myStyle}>Remove Extra Spaces</button>\n\n                <button onClick={handleCopy} className=\"btnn\" style={props.myStyle}>copy text</button>\n            </div>\n\n\n            <p>word count : {text.split(\" \").length}</p>\n            <p>characters count : {text.length}</p>\n        </div>\n        </>\n    )\n    \n}","import react, {useState} from \"react\";\nimport './Navbar.css'\nimport {Link} from 'react-router-dom';\n\nfunction Navbar(props){\n    const [myStyle, setStyle] = useState({\n        color : 'black',\n        backgroundColor : 'white'\n    })\n\n    return (\n        <nav class={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} id=\"myNavbar\">\n            <div class=\"container-fluid\">\n                {/* <a class=\"navbar-brand\" href=\"/home\">TextUtiles</a> */}\n                <Link class=\"navbar-brand\" to=\"/\">TextUtiles</Link>\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li class=\"nav-item\">\n                        {/* <a class=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> */}\n                        <Link class=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                        </li>\n                        <li class=\"nav-item\">\n                        {/* <a class=\"nav-link\" href=\"/about\">About</a> */}\n                        <Link class=\"nav-link\" to=\"/about\">About</Link>\n                        </li>\n                    </ul>\n                </div>\n\n                <div className=\"form-check form-switch\">\n                    <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.changeMode}/>\n                    <label className=\"form-check-label\" HTMLFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar","import react from \"react\";\nimport './About.css'\n\nfunction About(props){  \n    return (\n        <div id=\"myPara\">\n            <p>\n                As Bootstrap 5 continues to mature, more and more styles will be built with CSS variables as a means to provide more real-time customization without the need to always recompile Sass. Our approach is to take our source Sass variables and transform them into CSS variables. That way, even if you donâ€™t use CSS variables, you still have all the power of Sass. This is still in-progress and will take time to fully implement.\n            </p>\n        </div>\n    );\n}\n\nexport default About;","import react from \"react\";\nimport './Alert.css'\n\nfunction Alert(props){\n    return (\n        <div style={{height: \"10px\"}}>\n           {props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" id=\"myAlert\">\n                <strong>{props.alert.msg}</strong>\n            </div>}\n        </div>\n    );\n}\n\nexport default Alert;","import logo from './logo.svg';\nimport './App.css';\nimport TextUtils from './TextUtiles/TextUtils';\nimport DarkMode from './DarkMode/DarkMode';\nimport Navbar from './Navbar/Navbar'\nimport About from './About/About'\nimport Alert from './Alert/Alert'\nimport react, {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (type, message)=>{\n    setAlert({\n      type : type,\n      msg : message\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 700);\n  }\n\n  const [mode, setMode] = useState('light');\n\n  const [myStyle, setStyle] = useState({\n    color : 'black',\n    backgroundColor : 'white'\n  })\n\n  const changeMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      // document.title = 'dark'\n      showAlert(\"success\", \"Dark mode enabled\");\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white';\n      setStyle({\n        color : 'white',\n        backgroundColor : 'black'\n      })\n    }\n    else{\n      setMode('light');\n      // document.title = 'light'\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      setStyle({\n        color : 'black',\n        backgroundColor : 'white'\n      })\n      showAlert(\"warning\", \"Dark mode disabled\");\n    }\n  }\n\n  return (\n    <>\n    <Router>\n        <Navbar mode={mode} myStyle={myStyle} changeMode={changeMode}/>\n        <Alert alert={alert}/>\n        <Switch>\n          <Route exact path=\"/\">\n            <TextUtils mode={mode} myStyle={myStyle}/>\n          </Route>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n        {/* <DarkMode/> */}\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}