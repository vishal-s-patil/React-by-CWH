creating reacte app:
	command : npx create-react-app <app_name>
starting the server:
	command : npm start || npm run start
JSX:
	structure like html. JS can be written inside "{ }". React JSX code can be offline transformed into javascript code using babel compiler 		command line tool.
	Ex:
		name = "name"
		function fun() {	
			return (
				&lt&gt
				<p> my name is : {name} &lt/&gt
				{console.log(name);}
				&lt/>&gt		
			)
		}
	
	in jsx 
	->class is replaced by className
	->for is replaced by HTMLFor
	->self closing tags must have "/" before ">"
		EX:
			in html:
				&ltinput name="name"&gt
			in jsx:
				&ltinput name="name"/&gt
export default vs named export:
	default exports can be imported with any name
	
	EX:
		function fun() {console.log("hello");}
		export default fun;
		
		import abc from './filename.mjs'
		
	in named export while importing them or using them in the imported file their name should match with their name in the module_file
	Ex:
		a=1
		b = 2
		export{a}
		export{b}
		
		import {a, b} from './filename.mjs'
		
		invalid inports:
			import {b, a} from './filename.mjs'
			import {c, d} from './filename.mjs'
			

Props and PropTypes:
	using props we can pass the attributs or key value pairs to the component
	Ex:
		main file:
			import Navbar from './Navbar';
			&ltNavbar title="mytitle"&gt
		component file
			export default function Navbar(props){
				return (
					&lth1&gt {props.tile} &lt/h1&gt
					{console.log(props.tile)}
				)
			}
		
	->props cannot be changed inside the component
	
	propTypes:
	component.PropTypes = {key-1 : PropTypes.data_type, key-2: PropTypes.data_type, ...}
	
	Ex:
		main file:
			import Navbar from './Navbar';
			&ltNavbar title="mytitle" name="name"&gt
		component file:
			export default function Navbar(props){
				return (
					&lth1&gt {props.tile} &lt/h1&gt
					{console.log(props.tile)}
				)
			}
			
			Navbar.PropTypes = {title: PropTypes.string}
			
			Navbar.PropTypes = {title: PropTypes.string.isRequired} //title must be passed otherwise it throws error
			if default Props are defined isRequired will not throw any error
			
	default props:
		Ex:
			component.defaultProps = {key-1: value-1, key-1: value-2}
			
		main file:
			import Navbar from './Navbar';
			&ltNavbar title="mytitle" name="name"&gt
		component file:
			export default function Navbar(props){
				return (
					&lth1&gt {props.tile} &lt/h1&gt
					{console.log(props.tile)}
				)
			}
			
			Navbar.PropTypes = {title: PropTypes.string}
			
			Navbar.defaultProps = {title: "title"}
			
Hooks:
	Hooks let us use state and other react features without writing a class		
	usestate Hook:
	EX:
		import {usestate} from 'react'
		const [text, setText] = useState("string")
		->text contain string
		->using setText we can update the text (if we try to update text directly it will throw an arror)

state:
	Ex:
	import react, {useState} from "react";

	export default function Navbar()
	{
	    let handleUpperCase = () =&gt {
		console.log("upper");
		let newStr = text.toUpperCase();
		setText(newStr);
	    }

	    let handleOnChange = (event) =&gt {
		//inside the text area we directly cannot modify the text as it is a state
		//we can use onChange event
		//onChange passes a event using which we can access the text inside the text area and it is invokes whenever the text inside text 			//area is chaned
		console.log("On Change");
		setText(event.target.value)
	    }    

	    const [text, setText] = useState("my string")
	    return (
		&lt&gt
		&lttextarea cols="30" rows="10" value={text} onChange={handleOnChange}></textarea>

		&ltbutton onClick={handleUpperCase}&gtconvert to upper case &lt/button&gt
		&lt/&gt
	    )
	}
	
